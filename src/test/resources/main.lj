# Объявление модуля `TM`
module ru.DmN.TM
    # Псевдоним для модуля `TM`, определяется и действует в пределах текущего модуля
    alias this=ru.DmN.TM # Псевдоним `this` по умолчанию определяется как *имя текущего модуля*

    # Глобальная переменная модуля `TM` с названием `text`
    var text

    # Функция инициализации модуля (всегда называется `init` и имеет дескриптор `V`)
    # Вызывается при загрузке модуля
    fun init|V
    |>
        # Устанавливаем в переменную `text` текущего модуля значение типа object (строку) "Сало!"
        this$text = "Сало!"
    <|

    # Точка входа в программу (всегда называется `main` и имеет дескриптор `IO`)
    # Вызывается при старте программы
    # Возвращает 0 при удачном её завершении
    fun main|IO
    |>
        # Устанавливаем в локальную переменную `str` значение переменной `text` текущего модуля
        var str = this$text
        # Загружаем локальную переменную `str` в стек
        push str
        # Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO # Вывод: Сало!

        # Помещаем в стек число `12`
        push 12.3
        # Помещаем в стек число `21`
        push 21.2
        # Складываем числа в стеке [12, 21] -> [33]
        opcode add
        # Помещаем в стек число`-1`
        push -1
        # Складываем числа в стеке [33, -1] -> [32]
        opcode add
        # Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO # Вывод: 32

        # Начало цикла
        # Помещаем в стек число `0`
        push 0
        # Метка `loop`
        label loop

        # Дублируем значение стека [X] -> [X, X]
        opcode dup
        # Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO # Вывод: X

        # Складываем число из стека с числом `1` [X] -> [X+1]
        push (pop + 1)

        # Дублируем значение стека [X] -> [X, X]
        opcode dup
        
        # Сравниваем число из стека с числом `10` [X] -> [10>X]
        push (10 > pop)

        # Если в стеке значение типа bool (логическое) `true` то переходим на метку `loop`
        cjmp loop
        # Конец цикла

        # Подбираем значение из стека в локальную переменную `result`
        var result = pop

        # Точка останова
        opcode breakpoint

        # Блок try-catch, с указанием метки `catch` для отлавливания исключений
        try catch
        |>
            # Помещаем в стек строку "Текст исключения."
            push "Текст исключения."
            # Вызываем функцию `exception` с дескриптором `OO` модуля `std`
            call std$exception|OO # Функция std$exception|OO служит для создания исключения
            # Бросаем исключение [E] -> []
            opcode throw # После этого будет выполнен переход на метку `catch`
        <|
        # Конец try-catch блока

        # Возвращаем 1
        return 1

        # Метка `catch`
        label catch
        # Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO # Вывод: Текст исключения.

        # Вызываем функцию `foo` с дескриптором `V` текущего модуля
        call this$foo|V

        # Возвращаем 0
        return 0
    <|

    # Функция `foo` с дескриптором `V` 
    fun foo|V
    |>
        # Помещаем в стек строку "Foo!"
        push "Foo!"
        # Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO # Вывод: Foo!

        # Точка останова
        opcode breakpoint
    <|
end
# Конец объявления модуля `TM`