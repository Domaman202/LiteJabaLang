// Объявление модуля `TM`
module TM
    // Глобальная переменная модуля `TM` с названием `text`
    var text

    // Функция инициализации модуля (всегда называется `init` и имеет дескриптор `V`)
    // Вызывается при загрузке модуля
    fun init|V
    |>
        // Устанавливаем в переменную `text` модуля `TM` значение типа object (строку) "Сало!"
        TM$text = "Сало!"
        // Производим выход из функции
        return // TODO: избавиться от пустых return в конце
    <|

    // Точка входа в программу (всегда называется `main` и имеет дескриптор `IO`)
    // Вызывается при старте программы
    // Возвращает 0 при удачном её завершении
    fun main|IO
    |>
        // Устанавливаем в локальную переменную `str` значение переменной `text` модуля `TM`
        var str = TM$text
        // Загружаем локальную переменную `str` в стек
        push .$str
        // Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO // Вывод: Сало!

        // Помещаем в стек значение типа int (число) `12`
        push 12
        // Помещаем в стек значение типа int (число) `21`
        push 21
        // Складываем числа в стеке [12, 21] -> [33]
        opcode add
        // Помещаем значение типа int (число) `-1`
        push -1
        // Складываем числа в стеке [33, -1] -> [32]
        opcode add
        // Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO // Вывод: 32

        // Начало цикла
        // Помещаем в стек значение типа int (число) `0`
        push 0
        // Метка `loop`
        label loop

        // Дублируем значение стека [X] -> [X, X]
        opcode dup
        // Вызываем функцию `println` с дескриптором `VO` модуля `std`
        call std$println|VO // Вывод: X

        // Помещаем в стек значение типа int (число) `1`
        push 1
        // Складываем числа в стеке [X, 1] -> [X+1]
        opcode add

        // Дублируем значение стека [X] -> [X, X]
        opcode dup
        // Помещаем в стек значение типа int (число) `10`
        push 10
        // Производим операцию сравнивания значений в стеке [X, 10] -> [X<10]
        opcode great
        // Если в стеке значение типа bool (логическое) `true` то переходим на метку `loop`
        cjmp loop
        // Конец цикла

        // Подбираем значение из стека в локальную переменную `result`
        var result = pop

        // Точка останова
        opcode breakpoint

        // Возвращаем 0
        return 0
    <|
end
// Конец объявления модуля `TM`